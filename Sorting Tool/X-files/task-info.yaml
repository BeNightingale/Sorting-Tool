type: edu
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                // write your code here
            }
        }
    }
  learner_created: false
- name: test/common/SortingToolStage6Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.io.File
    import java.io.FileNotFoundException
    import java.util.*

    class SortingToolStage6Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests() + stage6Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            @Suppress("NAME_SHADOWING") var reply = reply

            val fileNameArgIdx = clue.args.indexOf("-outputFile")

            if (fileNameArgIdx != -1) {
                val fileName = clue.args[fileNameArgIdx + 1]

                try {
                    reply = File(fileName).readText()
                } catch (ex: FileNotFoundException) {
                    return CheckResult.wrong(
                        "There is no output file $fileName"
                    )
                }

            }

            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    private fun fileTestCase(
            input: String,
            revealTest: Boolean,
            file: String,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(input, revealTest, args.toList()))
                .addArguments(*args)
                .addFile(file, input)
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }

    fun stage6Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "input.txt",
                        "-sortingType", "byCount", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "data.dat",
                        "-sortingType", "byCount", "-inputFile", "data.dat", "-outputFile", "out.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "input.txt",
                        "-sortingType", "natural", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "data.dat",
                        "-sortingType", "natural", "-inputFile", "data.dat", "-outputFile", "out.txt"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }


    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }


    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }


    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: src/sorting/Algorithms.java
  visible: true
  text: |
    package sorting;

    import java.util.*;
    import java.util.function.Function;
    import java.util.stream.Collectors;

    public class Algorithms {

        Function<List<Long>, String> sortLongNaturallyFunction = numbersList -> {
            numbersList.sort(Comparator.naturalOrder());
            long total = numbersList.size();
            String concatenatedList = numbersList.stream()
                    .map(String::valueOf)
                    .collect(Collectors.joining(" "));
            return String.format("Total numbers: %s.%nSorted data: %s", total, concatenatedList);
        };

        Function<List<Long>, String> sortLongByCountFunction = numbersList -> {
            long total = numbersList.size();
            Map<Long, Integer> numOccurrences = new TreeMap<>();
            List<Long> distinctLongs = numbersList.stream().distinct().collect(Collectors.toList());
            distinctLongs.forEach(num -> numOccurrences.put(num, Collections.frequency(numbersList, num)));
            Set<Map.Entry<Long, Integer>> entries = numOccurrences.entrySet();
            Map<Long, Integer> sortedMap = entries
                    .stream()
                    .sorted(Map.Entry.<Long, Integer>comparingByValue().thenComparing(Map.Entry.comparingByKey()))//sortowanie grup, które mają tę samą liczbę wystąpień (czyli to samo value) według wartości, czyli wg klucza
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            return String.format("Total numbers: %s.%n%s", total, formatOccurrencesMap(sortedMap, total));
        };

        Function<List<String>, String> sortLinesNaturallyFunction = linesList -> {
            linesList.sort(Comparator.naturalOrder());
            long total = linesList.size();
            return String.format("Total lines: %s%nSorted data:%n%s", total, formatLinesList(linesList)); // NIE MA KROPKI!!!
        };

        Function<List<String>, String> sortLinesByCountFunction = linesList -> {
            long total = linesList.size();
            Map<String, Integer> lineOccurrences = new TreeMap<>();
            List<String> distinctLines = linesList.stream().distinct().collect(Collectors.toList());
            distinctLines.forEach(line -> lineOccurrences.put(line, Collections.frequency(linesList, line)));
            Set<Map.Entry<String, Integer>> entries = lineOccurrences.entrySet();
            Map<String, Integer> sortedMap = entries.stream()
                    .sorted(Map.Entry.<String, Integer>comparingByValue().thenComparing(Map.Entry.comparingByKey()))
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (x, y) -> x, LinkedHashMap::new));
            return String.format("Total lines: %s.%n%s", total, formatOccurrencesMap(sortedMap, total));
        };

        Function<List<String>, String> sortWordsNaturallyFunction = wordsList -> {
            wordsList.sort(Comparator.naturalOrder());// porównywanie wg znaków czy wartości liczb???
            long total = wordsList.size();
            return String.format("Total words: %s.%nSorted data: %s", total, formatWordsList(wordsList));
        };

        Function<List<String>, String> sortWordsByCountFunction = wordsList -> {
            long total = wordsList.size();
            Map<String, Integer> wordOccurrences = new TreeMap<>();
            List<String> distinctWords = wordsList.stream().distinct().collect(Collectors.toList());
            distinctWords.forEach(line -> wordOccurrences.put(line, Collections.frequency(wordsList, line)));
            Set<Map.Entry<String, Integer>> entries = wordOccurrences.entrySet();
            Map<String, Integer> sortedMap = entries.stream()
                    .sorted(Map.Entry.<String, Integer>comparingByValue().thenComparing(Map.Entry.comparingByKey()))
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (x, y) -> x, LinkedHashMap::new));
            return String.format("Total words: %s.%n%s", total, formatOccurrencesMap(sortedMap, total));
        };

        public List<Long> readLongs(Scanner scanner) {
            List<Long> numbersList = new ArrayList<>();
            while (scanner.hasNext()) {
                String stringNum = scanner.next();
                try {
                    long number = Long.parseLong(stringNum);
                    numbersList.add(number);
                } catch (NumberFormatException ex) {
                    System.out.printf("\"%s\" is not a long. It will be skipped. ", stringNum);
                }
            }
            return numbersList;
        }

        public List<String> readLines(Scanner scanner) {
            List<String> linesList = new ArrayList<>();
            while (scanner.hasNext()) {
                String line = scanner.nextLine();
                linesList.add(line);
            }
            return linesList;
        }

        public List<String> readWords(Scanner scanner) {
            List<String> wordsList = new ArrayList<>();
            while (scanner.hasNext()) {
                String word = scanner.next();
                wordsList.add(word);
            }
            return wordsList;
        }

        private String formatLinesList(List<String> linesList) {
            return String.join("\n", linesList);
        }

        private String formatWordsList(List<String> list) {
            return String.join(" ", list);
        }

        private <K> String formatOccurrencesMap(Map<K, Integer> sortedMap, long totalNumbersCountInList) {
            return sortedMap.entrySet().stream()
                    .map(entry -> String.format("%s: %s time(s), %s%s",
                            entry.getKey(), entry.getValue(), Math.round(entry.getValue() / (double) totalNumbersCountInList * 100), "%"))
                    .collect(Collectors.joining("\n"));
        }
    }
  learner_created: true
- name: src/sorting/Util.java
  visible: true
  text: |
    package sorting;

    import java.util.List;
    import java.util.Scanner;

    public class Util {

        private Util() {
            // sth
        }

        protected static void evaluateInput(Scanner scanner, String inputType) {
            Algorithms algorithms = new Algorithms();
            String result = switch (inputType) {
                case "long-natural" -> {
                    List<Long> numbersList = algorithms.readLongs(scanner);
                    yield algorithms.sortLongNaturallyFunction.apply(numbersList);
                }
                case "long-byCount" -> {
                    List<Long> numbersList = algorithms.readLongs(scanner);
                    yield algorithms.sortLongByCountFunction.apply(numbersList);
                }
                case "line-natural" -> {
                    List<String> linesList = algorithms.readLines(scanner);
                    yield algorithms.sortLinesNaturallyFunction.apply(linesList);
                }
                case "line-byCount" -> {
                    List<String> linesList = algorithms.readLines(scanner);
                    yield algorithms.sortLinesByCountFunction.apply(linesList);
                }
                case "word-natural" -> {
                    List<String> wordsList = algorithms.readWords(scanner);
                    yield algorithms.sortWordsNaturallyFunction.apply(wordsList);
                }
                case "word-byCount" -> {
                    List<String> wordsList = algorithms.readWords(scanner);
                    yield algorithms.sortWordsByCountFunction.apply(wordsList);
                }
                default -> {
                    System.out.println("error");
                    yield "";
                }
            };
            System.out.println(result);
        }
    }
  learner_created: true
- name: src/sorting/ArgumentException.java
  visible: true
  text: |
    package sorting;

    public class ArgumentException extends RuntimeException {
        ArgumentException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/sorting/SortingType.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5386#comment
status: Unchecked
record: -1
